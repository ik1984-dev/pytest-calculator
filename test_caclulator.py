"""
Модуль тестирования для калькулятора.
Использует pytest для проверки корректности работы арифметических операций.
"""

import pytest
from calculator import add, subtract, multiply, divide


def test_add(capfd):
    """
    Тестирование функции сложения.

    Проверяет корректность сложения для различных пар чисел.

    Args:
        capfd: Фикстура pytest для перехвата вывода
    """
    # Тестовые случаи: пары чисел (a, b)
    for a, b in [(2, 3), (-1, -1)]:
        result = add(a, b)
        # Вывод отладочной информации
        print(f"Тестирование сложения с a={a}, b={b}: {result}")
        # Проверка, что результат соответствует ожидаемому
        assert result == a + b


def test_subtract(capfd):
    """
    Тестирование функции вычитания.

    Проверяет корректность вычитания для различных пар чисел.

    Args:
        capfd: Фикстура pytest для перехвата вывода
    """
    # Тестовые случаи с разным порядком операндов
    for a, b in [(5, 3), (3, 5)]:
        result = subtract(a, b)
        print(f"Тестирование вычитания с a={a}, b={b}: {result}")
        assert result == a - b


def test_multiply(capfd):
    """
    Тестирование функции умножения.

    Проверяет корректность умножения для различных пар чисел.

    Args:
        capfd: Фикстура pytest для перехвата вывода
    """
    # Тестовые случаи с положительными и отрицательными числами
    for a, b in [(2, 3), (-1, 1)]:
        result = multiply(a, b)
        print(f"Тестирование умножения с a={a}, b={b}: {result}")
        assert result == a * b


def test_divide(capfd):
    """
    Тестирование функции деления.

    Проверяет корректность деления и обработку деления на ноль.

    Args:
        capfd: Фикстура pytest для перехвата вывода
    """
    # Тестирование нормального деления
    for a, b in [(6, 3)]:
        result = divide(a, b)
        print(f"Тестирование деления с a={a}, b={b}: {result}")
        assert result == a / b

    # Тестирование обработки деления на ноль
    with pytest.raises(ValueError) as excinfo:
        divide(5, 0)

    print("Тестирование деления на ноль вызвало ValueError, как и ожидалось.")

    # Проверка текста сообщения об ошибке
    assert str(excinfo.value) == "Нельзя делить на ноль."